% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stats-loess.R
\name{safe_predict.loess}
\alias{safe_predict.loess}
\title{Safe predictions from a loess object}
\usage{
\method{safe_predict}{loess}(object, new_data, type = c("response",
  "conf_int", "pred_int"), ..., std_error = FALSE, level = 0.95)
}
\arguments{
\item{object}{A \code{loess} object returned from a call to \code{\link[stats:loess]{stats::loess()}}.}

\item{new_data}{TODO}

\item{type}{What kind of predictions to return. Options are:
\itemize{
\item \code{"response"} (default): Standard predictions from LOESS regression.
\item \code{"conf_int"}: Fitted values plus a confidence interval for the fit.
\item \code{"pred_int"}: Predictions with accompanying prediction interval.
}}

\item{...}{Unused. \code{safe_predict()} checks that all arguments in \code{...} are
evaluated via the \code{ellipsis} package. The idea is to prevent silent errors
when arguments are mispelled. This feature is experimental and feedback
is welcome.}

\item{std_error}{Logical indicating whether or not calculate standard
errors for the fit at each point. Not available for all models, and can
be computationally expensive to compute. The standard error is \emph{always}
the standard error for the mean, and \emph{never} the standard error for
predictions. Standard errors are returned in a column called \code{.std_error}.
Defaults to \code{FALSE}.}

\item{level}{A number strictly between \code{0} and \code{1} to use as the
confidence level when calculating confidence and prediction intervals.
Setting \code{level = 0.90} correspondings to a 90 percent confidence interval.
Ignored except when \code{type = "conf_int"} or \code{type = "pred_int"}. Defaults
to \code{0.95}.}
}
\value{
A \code{\link[tibble:tibble]{tibble::tibble()}} with one row for each row of \code{new_data}.
Predictions for observations with missing data will be \code{NA}. Returned
tibble has different columns depending on \code{type}:
\itemize{
\item \code{"response"}:
\itemize{
\item univariate outcome: \code{.pred} (numeric)
\item multivariate outcomes: \code{.pred_{outcome name}} (numeric) for each
outcome
}
\item \code{"class"}: \code{.pred_class} (factor)
\item \code{"prob"}: \code{.pred_{level}} columns (numerics between 0 and 1)
\item \code{"link"}: \code{.pred} (numeric)
\item \code{"conf_int"}: \code{.pred}, \code{.pred_lower}, \code{.pred_upper} (all numeric)
\item \code{"pred_int"}: \code{.pred}, \code{.pred_lower}, \code{.pred_upper} (all numeric)
}

If you request standard errors with \code{std_error = TRUE}, an additional
column \code{.std_error}.

For interval predictions, the tibble has additional attributes \code{level}
and \code{interval}. The \code{level} is the same as the \code{level} argument and is
between 0 and 1. \code{interval} is either \code{"confidence"} or \code{"prediction"}.
Some models may also set a \code{method} attribute to detail the method
used to calculate the intervals.
}
\description{
Safe predictions from a loess object
}
\examples{

fit <- loess(mpg ~ wt, mtcars)
safe_predict(fit, mtcars)
safe_predict(fit, mtcars, std_error = TRUE)

# the default behavior of loess() is return NA for values
# outside the range of the training data:

safe_predict(fit, data.frame(wt = 1:10))

# to enable extrapolation, use:

fit2 <- loess(
  mpg ~ wt,
  mtcars,
   control = loess.control(surface = "direct")
)

safe_predict(fit2, data.frame(wt = 1:10), type = "pred_int", level = 0.9)

}
